var y=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var G=(g,e)=>{for(var t in e)y(g,t,{get:e[t],enumerable:!0})},P=(g,e,t,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of x(e))!v.call(g,o)&&o!==t&&y(g,o,{get:()=>e[o],enumerable:!(a=C(e,o))||a.enumerable});return g};var T=g=>P(y({},"__esModule",{value:!0}),g);var b={};G(b,{default:()=>p});module.exports=T(b);var i=require("obsidian"),w={Default:"",Academic:"The tone should be academic.",Business:"The tone should be professional and suitable for business communication.",Casual:"The tone should be casual and friendly.",Creative:"The tone should be creative and engaging.",Technical:"The tone should be technical and precise."},E={apiKey:"",model:"gemini-2.5-flash-lite",triggerKey:"Ctrl+G",improvementLevel:"style",writingStyle:"Default",customStyles:[]},p=class extends i.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new f(this.app,this)),this.addCommand({id:"send-to-gemini",name:"Send text to Gemini",editorCallback:(e,t)=>{this.sendToGemini(e)}}),console.log("Gemini Chat Integration loaded")}onunload(){console.log("Gemini Chat Integration unloaded")}async loadSettings(){this.settings=Object.assign({},E,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}generatePrompt(e){let t="";switch(this.settings.improvementLevel){case"grammar":t="Please ONLY correct any grammar and spelling errors in the following text.";break;case"structure":t="Please ONLY correct grammar and spelling, and improve sentence structure and flow for the following text.";break;case"style":t="Please correct grammar and spelling, improve sentence structure, and enhance word choice and writing style for the following text.";break}let a=this.settings.writingStyle,o="";if(w[a])o=w[a];else{let c=this.settings.customStyles.find(r=>r.name===a);c&&(o=c.prompt)}return o&&(t+=` ${o}`),t+=`
Maintain the original meaning.`,t+=`
Do not add extra text or explanations, just return the improved text.`,t+=`

Text: ${e}`,t}getSentenceBeforeCursor(e){let t=e.getCursor();if(e.lineCount()===0||t.line===0&&t.ch===0)return null;let a=e.getRange({line:0,ch:0},t),o=-1,c=[".","?","!"];for(let l=a.length-1;l>=0;l--)if(c.includes(a[l])){o=l;break}let r=o+1;for(;r<a.length&&/\s/.test(a[r]);)r++;let n=a.substring(r,a.length);if(n.trim()==="")return null;let s=0,m=r;for(let l=0;l<r;l++)a[l]===`
`&&(s++,m=r-l-1);return{text:n,startPos:{line:s,ch:m}}}async sendToGemini(e){if(!this.settings.apiKey){new i.Notice("Please configure your Gemini API key in plugin settings");return}let t="",a,o,c=e.getSelection();if(c)t=c,a=e.getCursor("from"),o=e.getCursor("to");else{let r=this.getSentenceBeforeCursor(e);if(!r){new i.Notice("No sentence found to improve.");return}t=r.text,a=r.startPos,o=e.getCursor()}try{new i.Notice("Sending text to Gemini for improvement...");let n={contents:[{role:"user",parts:[{text:this.generatePrompt(t)}]}]},m=`https://generativelanguage.googleapis.com/v1beta/models/${this.settings.model}:generateContent?key=${this.settings.apiKey}`,d=(await(0,i.requestUrl)({url:m,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)})).json,h="";if(d.candidates&&d.candidates.length>0){let u=d.candidates[0];if(u.content&&u.content.parts&&u.content.parts.length>0){let S=u.content.parts[0];S.text&&(h=S.text.trim())}}h?(e.replaceRange(h,a,o),new i.Notice("Text improved by Gemini")):(new i.Notice("Gemini returned an empty response."),console.warn("Gemini response was empty or did not contain expected text:",d))}catch(r){console.error("Error sending to Gemini:",r),new i.Notice(`Error: ${r.message}`)}}},f=class extends i.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Gemini Chat Integration Settings"}),new i.Setting(e).setName("API Key").setDesc("Your Gemini API key").addText(n=>n.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange(async s=>{this.plugin.settings.apiKey=s,await this.plugin.saveSettings()})),new i.Setting(e).setName("Model").setDesc("Gemini model to use").addDropdown(n=>n.addOption("gemini-2.5-pro","Gemini 2.5 Pro").addOption("gemini-2.5-flash","Gemini 2.5 Flash").addOption("gemini-2.5-flash-lite","Gemini 2.5 Flash Lite").setValue(this.plugin.settings.model).onChange(async s=>{this.plugin.settings.model=s,await this.plugin.saveSettings()})),new i.Setting(e).setName("Improvement Level").setDesc("How much the AI should change your text.").addDropdown(n=>n.addOption("grammar","Grammar & Spelling Only").addOption("structure","Grammar & Structure").addOption("style","Grammar, Structure, & Style").setValue(this.plugin.settings.improvementLevel).onChange(async s=>{this.plugin.settings.improvementLevel=s,await this.plugin.saveSettings()})),new i.Setting(e).setName("Writing Style").setDesc("The target writing style for the improvement.").addDropdown(n=>{Object.keys(w).forEach(s=>{n.addOption(s,s)}),this.plugin.settings.customStyles.forEach(s=>{n.addOption(s.name,s.name)}),n.setValue(this.plugin.settings.writingStyle).onChange(async s=>{this.plugin.settings.writingStyle=s,await this.plugin.saveSettings()})}),e.createEl("h3",{text:"Custom Writing Styles"}),this.plugin.settings.customStyles.forEach((n,s)=>{let m=new i.Setting(e).setName(n.name).setDesc(n.prompt).addButton(l=>{l.setButtonText("Delete").setCta().onClick(async()=>{this.plugin.settings.customStyles.splice(s,1),await this.plugin.saveSettings(),this.display()})})});let t=e.createDiv();t.addClass("gemini-new-style-container");let a="",o="";new i.Setting(t).setName("New style name").addText(n=>n.onChange(s=>a=s));let c=new i.Setting(t).setName("New style prompt").setDesc('The instruction for the AI (e.g., "in a witty and sarcastic tone").'),r=new i.TextAreaComponent(c.controlEl).onChange(n=>o=n);r.inputEl.rows=4,r.inputEl.style.width="100%",new i.Setting(t).addButton(n=>n.setButtonText("Add Custom Style").onClick(async()=>{a&&o&&(this.plugin.settings.customStyles.push({name:a,prompt:o}),await this.plugin.saveSettings(),this.display())})),new i.Setting(e).setName("Trigger Key").setDesc("Key combination to trigger the Gemini integration").addText(n=>n.setPlaceholder("Ctrl+G").setValue(this.plugin.settings.triggerKey).onChange(async s=>{this.plugin.settings.triggerKey=s,await this.plugin.saveSettings()}))}};
